  @startuml model
    ' left to right direction   
    Account <|-- Manager
    Account <|-- Owner
    Account <|-- Admin
  
    PersonalData "1" --* "1" Account
    LoginData "1" --* "1"Account
      
    AbstractEntity <|-- Account
    AbstractEntity <|-- PersonalData
    AbstractEntity <|-- LoginData

    abstract class Account {
      # id: Long
      # email: String
      # username: String
      # password: String
      # isEnable: Boolean
      # isActive: Boolean
      # registerDate: LocalDateTime
      # language: String
      # version: Long

      + geId(): Long
      + getEmail(): String
      + getUsername(): String
      + getPassword(): String
      + getIsEnable(): Boolean
      + getIsActive(): Boolean
      + getRegisterDate(): LocalDateTime
      + getLanguage(): String
      + getVersion(): Long

      + setEmail(email: String): void
      + setIsEnable(isEnable: Boolean): void
      + setLanguage(language: String): void

    }

    class LoginData {
      - id: Long
      - lastValidLoginDate: LocalDateTime
      - lastValidLogicAddress: String
      - lastInvalidLoginDate: LocalDateTime
      - lastInvalidLogicAddress: String
      - invalidLoginCounter: Short
      - version: Long

      + getId(): Long
      + getLastValidLoginDate(): LocalDateTime
      + getLastValidLogicAddress(): String
      + getLastInvalidLoginDate(): LocalDateTime
      + getLastInvalidLogicAddress(): String
      + getInvalidLoginCounter(): Short
      + getVersion(): Long

      + setLastValidLoginDate(date: LocalDateTime): void
      + setLastValidLogicAddress(address: String): void
      + setLastInvalidLoginDate(date: LocalDateTime): void
      + setLastInvalidLogicAddress(address: String): void
      + setInvalidLoginCounter(counter: Short): void

  }

    abstract class AbstractEntity {
      # lastModificationDate: LocalDateTime
      # lastModificationAuthor: String
      # lastModificationOperation: String
      # version: Long


      + getLastModificationDate(): LocalDateTime
      + getLastModificationAuthor(): String
      + getLastModificationOperation(): String
      + getVersion(): Long
    }

    class Manager {
      - license: String

      + getLicense(): String
    }

    class Owner {
      - phoneNumber: String

      + getPhoneNumber(): String

      + setPhoneNumber(phoneNumber: String): void
    }
    
    class Admin {
        }

      class PersonalData {
      - id: Long
      - firstName: String
      - surname: String
      - version: Long

      + getId(): Long
      + getFirstName(): String
      + getSurname(): String
      + getVersion(): Long

      + setFirstName(firstName: String): void
      + setSurname(surname: String): void
    }

    @enduml